<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>axios拦截器介绍</title>
      <link href="/2019/09/03/axios-lan-jie-qi/"/>
      <url>/2019/09/03/axios-lan-jie-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="axios拦截器介绍"><a href="#axios拦截器介绍" class="headerlink" title="axios拦截器介绍"></a>axios拦截器介绍</h1><p>页面发送http请求，很多情况我们要对请求和其响应进行特定的处理；如果请求数非常多，单独对每一个请求进行处理会变得非常麻烦，程序的优雅性也会大打折扣。好在强大的axios为开发者提供了这样一个API：拦截器。拦截器分为 请求（request）拦截器和 响应（response）拦截器。</p><h2 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h2><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在发起请求请做一些业务处理</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对请求失败做处理</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h2><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对响应数据做处理</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对响应错误做处理</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="vue添加axios拦截器"><a href="#vue添加axios拦截器" class="headerlink" title="vue添加axios拦截器"></a>vue添加axios拦截器</h3><h4 id="安装-axios"><a href="#安装-axios" class="headerlink" title="安装 axios"></a>安装 axios</h4><p>npm install axios –save-dev</p><h4 id="新建文件-axios-js"><a href="#新建文件-axios-js" class="headerlink" title="新建文件 axios.js"></a>新建文件 axios.js</h4><p>开始统一封装axios， 首先引入axios、qs依赖</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> qs <span class="token keyword">from</span> <span class="token string">"qs"</span><span class="token punctuation">;</span></code></pre><p>然后创建一个axios实例，这个process.env.BASE_URL在config/dev.evn.js、prod.evn.js里面进行配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/****** 创建axios实例 ******/</span><span class="token keyword">const</span> service <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// api的base_url</span>    timeout<span class="token punctuation">:</span> <span class="token number">5000</span>  <span class="token comment" spellcheck="true">// 请求超时时间</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="使用request拦截器对axios请求配置做统一处理"><a href="#使用request拦截器对axios请求配置做统一处理" class="headerlink" title="使用request拦截器对axios请求配置做统一处理"></a>使用request拦截器对axios请求配置做统一处理</h4><pre class=" language-javascript"><code class="language-javascript">service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        app<span class="token punctuation">.</span>$vux<span class="token punctuation">.</span>loading<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                text<span class="token punctuation">:</span> <span class="token string">'数据加载中……'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         config<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'post'</span>                <span class="token operator">?</span> config<span class="token punctuation">.</span>data <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span>config<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">:</span> config<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>config<span class="token punctuation">.</span>params<span class="token punctuation">}</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//请求错误处理   </span>        app<span class="token punctuation">.</span>$vux<span class="token punctuation">.</span>toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    type<span class="token punctuation">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>                    text<span class="token punctuation">:</span> error           <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="对response做统一处理"><a href="#对response做统一处理" class="headerlink" title="对response做统一处理"></a>对response做统一处理</h4><pre class=" language-javascript"><code class="language-javascript">service<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//成功请求到数据        </span>        app<span class="token punctuation">.</span>$vux<span class="token punctuation">.</span>loading<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//这里根据后端提供的数据进行对应的处理        </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>result <span class="token operator">===</span> <span class="token string">'TRUE'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        app<span class="token punctuation">.</span>$vux<span class="token punctuation">.</span>toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//常规错误处理                </span>                type<span class="token punctuation">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>                                text<span class="token punctuation">:</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>msg                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//响应错误处理console.log('error');        </span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">let</span> text <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span>                        <span class="token operator">?</span> <span class="token string">'404'</span>                        <span class="token punctuation">:</span> <span class="token string">'网络异常，请重试'</span><span class="token punctuation">;</span>                app<span class="token punctuation">.</span>$vux<span class="token punctuation">.</span>toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        type<span class="token punctuation">:</span> <span class="token string">'warn'</span><span class="token punctuation">,</span>                        text<span class="token punctuation">:</span> text                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="将axios实例暴露出去"><a href="#将axios实例暴露出去" class="headerlink" title="将axios实例暴露出去"></a>将axios实例暴露出去</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> service<span class="token punctuation">;</span></code></pre><p>这样一个简单的拦截器就完成了</p><h4 id="在main-js中进行引用，并配置一个别名（-ajax）来进行调用"><a href="#在main-js中进行引用，并配置一个别名（-ajax）来进行调用" class="headerlink" title="在main.js中进行引用，并配置一个别名（$ajax）来进行调用"></a>在main.js中进行引用，并配置一个别名（$ajax）来进行调用</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> 'axios<span class="token string">'import '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>axios<span class="token punctuation">.</span>js'    <span class="token comment" spellcheck="true">//axios.js的路径</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$ajax <span class="token operator">=</span> axios</code></pre><h4 id="应用：一个简单的登录接口"><a href="#应用：一个简单的登录接口" class="headerlink" title="应用：一个简单的登录接口"></a>应用：一个简单的登录接口</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>　　method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>　　url<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>　　data<span class="token punctuation">:</span> <span class="token punctuation">{</span>　　　　<span class="token string">'userName'</span><span class="token punctuation">:</span> <span class="token string">'haha'</span><span class="token punctuation">,</span>　　　　<span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>　　console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>eg: axios拦截器对路由进行拦截</p><h4 id="1-路由拦截"><a href="#1-路由拦截" class="headerlink" title="1.路由拦截"></a>1.路由拦截</h4><p>在定义路由的时候就需要多添加一个自定义字段requireAuth，用于判断该路由的访问是否需要登录。如果用户已经登录，则顺利进入路由，否则就进入登录页面。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Index    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/repository'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'repository'</span><span class="token punctuation">,</span>        meta<span class="token punctuation">:</span> <span class="token punctuation">{</span>            requireAuth<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 添加该字段，表示进入这个路由是需要登录的</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Repository    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Login    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>定义完路由后，我们主要是利用vue-router提供的钩子函数beforeEach()对路由进行判断。</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requireAuth<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断该路由是否需要登录权限</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断当前的token是否存在</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>                query<span class="token punctuation">:</span> <span class="token punctuation">{</span>redirect<span class="token punctuation">:</span> to<span class="token punctuation">.</span>fullPath<span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 将跳转的路由path作为参数，登录成功后跳转到该路由</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>to.meta中是我们自定义的数据，其中就包括我们刚刚定义的requireAuth字段<br>通过这个字段来判断该路由是否需要登录权限<br>需要的话，同时当前应用不存在token，则跳转到登录页面，进行登录。登录成功后跳转到目标路由。</p><p>这种方式只是简单的前端路由控制，并不能阻止用户访问，假设有一种情况：当前token失效了，但是token依然保存在本地。这时候你去访问需要登录权限的路由时，实际上应该让用户重新登录。这时候就需要结合 http 拦截器 + 后端接口返回的http 状态码来判断。</p><h4 id="2-拦截器"><a href="#2-拦截器" class="headerlink" title="2.拦截器"></a>2.拦截器</h4><p>要想统一处理所有http请求和响应，就得用上 axios 的拦截器。通过配置http response inteceptor，当后端接口返回401 Unauthorized（未授权），让用户重新登录。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// http request 拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stoken<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断是否存在token，如果存在的话，则每个http header都加上token</span>            config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token string">`token </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// http response 拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">401</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true">// 返回 401 清除token信息并跳转到登录页面</span>                    router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                        path<span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>                        query<span class="token punctuation">:</span> <span class="token punctuation">{</span>redirect<span class="token punctuation">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>fullPath<span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 返回接口返回的错误信息</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/06/hello-world/"/>
      <url>/2019/08/06/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
